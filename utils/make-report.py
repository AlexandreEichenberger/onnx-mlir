#!/usr/bin/python3

# SPDX-License-Identifier: Apache-2.0

##################### fixLitTest.py ########################################
#
# Copyright 2023 The IBM Research Authors.
#
################################################################################
#
# This file scan -onnx-op-report=* and process it
#
################################################################################

import sys
import os
import getopt
import fileinput
import re
import subprocess

def print_usage(msg = ""):
    if msg:
        print("Error:", msg, "\n")
    print("make-report -[dfh] -i <file_log> [-p <op regexp>]")
    print("")
    print("Usage: scan SIMD report generated by `onnx-mlir --onnx-op-report=Simd`")
    print("  and report statistics about the ops found in the provided input log.")
    print("")
    print("Parameters")
    print("  -d/--details:          print statistics on reason for success/failure.")
    print("  -f/--full:             print statistics with even more info.")
    print("  -h/--help:             print usage.")
    print("  -i/--input <file_log>: input file to be scanned.")
    print("  -p/--pattern <regexp>: focus only on ops that match the regexp pattern.")
    exit(1)

################################################################################
# Global info.

report_pattern_count = {}
detailed_report_pattern_count = {}
simd_report_str = r'^==ONNX-SIMD-REPORT==,\s*([0-9a-zA-Z\.\-]+)\s*,(.*)'
simd_stat_message = "SIMD vector length (in elements), SIMD loop trip count (-1 is runtime), message"
report_str = simd_report_str
stat_message = simd_stat_message
focus_on_op_with_pattern = r'.*'
detailed_report = False
full_report = False

################################################################################
# Support.

def record_pattern(pat, det):
    global report_pattern_count, detailed_report_pattern_count
    global detailed_report

    if pat in report_pattern_count:
        report_pattern_count[pat] = report_pattern_count[pat] + 1
        if detailed_report:
            det_dict = detailed_report_pattern_count[pat]
            if det in det_dict:
                det_dict[det] = det_dict[det] + 1
            else:
                det_dict[det] = 1
            detailed_report_pattern_count[pat] = det_dict
    else:
        report_pattern_count[pat] = 1
        if detailed_report:
            det_dict = {}
            det_dict[det] = 1
            detailed_report_pattern_count[pat] = det_dict

################################################################################
# Main.

def parse_file(file_name):
    global detailed_report, full_report

    try:
        file = open(file_name, 'r')
    except OSError:
        print_usage("Could not open file `"+file_name+"`")

    for line in file:
        l = line.rstrip()
        # Scan pattern, only keep at it only if we have the report info.
        p = re.match(report_str, l)
        if p is None:
            continue
        # Have a line.
        op = p[1]
        details = p[2]
        f = re.match(focus_on_op_with_pattern, op)
        if f is None:
            continue
        # Have an interesting op
        if full_report:
            record_pattern(op, details)
        elif detailed_report:
            detail_array = details.split(",")
            record_pattern(op, detail_array[-1])
        else:
            record_pattern(op, "")

def make_report():
    global report_pattern_count, detailed_report_pattern_count
    global detailed_report, full_report, stat_message

    if (full_report):
        print("Full info:")
        print("  If you need more specific info on individual success/failure, run ")
        print("  `onnx-mlir --debug-only=lowering-to-krnl` and look at the compiler output.")
        print("")
        print("Statistic legend:")
        print("   num:", stat_message, "\n")
        print("")
    print("Statistics:")
    for key in sorted(report_pattern_count):
        print("  ", key, ":", report_pattern_count[key])
        if detailed_report:
            det_dict = detailed_report_pattern_count[key]
            for det_key in sorted(det_dict):
                if det_dict[det_key] == report_pattern_count[key]:
                    print("     *:", det_key)
                else:
                    print("    ", det_dict[det_key], ":", det_key)


def main(argv):
    global detailed_report, focus_on_op_with_pattern, full_report

    file_name = ""
    try:
        opts, args = getopt.getopt(
            argv, "dfhi:p:", ["details", "full", "help", "input=", "pattern="])
    except getopt.GetoptError:
        print_usage("Failure to parse inputs")
    for opt, arg in opts:
        if opt in ('-d', "--details"):
            detailed_report = True
        elif opt in ('-f', "--full"):
            detailed_report = True
            full_report = True
        elif opt in ('-h', "--help"):
            print_usage()
        elif opt in ('-i', "--input"):
            file_name = arg
        elif opt in ('-p', "--pattern"):
            focus_on_op_with_pattern = arg
            detailed_report = True

    if not file_name:
        print_usage("Command requires an input file name.\n")

    parse_file(file_name)
    make_report()

if __name__ == "__main__":
    main(sys.argv[1:])
